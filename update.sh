#!/bin/bash

# Diret√≥rios e arquivos de log
ROOT_DIR=".."
UPDATE_LOG="$ROOT_DIR/Logs/update_log.txt"
API_DIR="$ROOT_DIR/api"
DASHBOARD_DIR="$ROOT_DIR/dashboard"
CENTRAL_JS="$ROOT_DIR/praticom-shared-library/resources/_js"

log_write() {
    local MSG=$1
    local LOG_FILE=$2
    echo "[`date '+%Y-%m-%d %H:%M:%S'`] $MSG" | tee -a "$LOG_FILE"
}

# Fun√ß√£o para sincronizar JS
sync_js_to_service() {
    local SERVICE_DIR=$1
    local SERVICE_NAME=$2
    
    local JS_DIR="$SERVICE_DIR/_js"
    mkdir -p "$JS_DIR"

    for jsfile in "$CENTRAL_JS"/*.js; do
        if [ -f "$jsfile" ]; then
            cp -u "$jsfile" "$JS_DIR/"
            log_write "üìÑ JS $(basename $jsfile) copiado para $SERVICE_NAME" "$UPDATE_LOG"
        fi
    done
}

# Fun√ß√£o para atualizar servi√ßo via Composer
update_service() {
    local SERVICE_DIR=$1
    local SERVICE_NAME=$2
    
    if [ ! -d "$SERVICE_DIR" ]; then
        log_write "‚ö†Ô∏è  Diret√≥rio $SERVICE_NAME n√£o encontrado: $SERVICE_DIR" "$UPDATE_LOG"
        return 1
    fi
    
    if [ ! -f "$SERVICE_DIR/composer.json" ]; then
        log_write "‚ö†Ô∏è  $SERVICE_NAME n√£o possui composer.json. Pulando atualiza√ß√£o." "$UPDATE_LOG"
        return 1
    fi

    cd "$SERVICE_DIR" || {
        log_write "‚ùå Erro ao acessar diret√≥rio $SERVICE_NAME" "$UPDATE_LOG"
        return 1
    }

    # Verifica altera√ß√µes pendentes
    if command -v git &> /dev/null && [ -d ".git" ]; then
        if ! git diff-index --quiet HEAD -- 2>/dev/null; then
            log_write "‚ö†Ô∏è  $SERVICE_NAME possui altera√ß√µes n√£o commitadas. Pulando atualiza√ß√£o." "$UPDATE_LOG"
            cd - > /dev/null
            return 1
        fi
    fi

    log_write "üîÑ Atualizando $SERVICE_NAME..." "$UPDATE_LOG"

    # Composer update da shared-library
    if composer update praticom/shared-library --with-all-dependencies; then
        log_write "‚úÖ Composer update conclu√≠do para $SERVICE_NAME" "$UPDATE_LOG"
        
        # Sincronizar JS
        sync_js_to_service "$SERVICE_DIR" "$SERVICE_NAME"
        
        cd - > /dev/null
        log_write "‚úÖ $SERVICE_NAME atualizado e JS sincronizados." "$UPDATE_LOG"
        return 0
    else
        log_write "‚ùå Erro no composer update para $SERVICE_NAME" "$UPDATE_LOG"
        cd - > /dev/null
        return 1
    fi
}

# --- Inicializa√ß√£o ---
log_write "üöÄ Iniciando processo de atualiza√ß√£o..." "$UPDATE_LOG"

# --- Shared-library ---
cd praticom-shared-library || {
    log_write "‚ùå Erro: n√£o foi poss√≠vel acessar praticom-shared-library" "$UPDATE_LOG"
    exit 1
}

# Verifica altera√ß√µes pendentes na shared-library
if ! git diff-index --quiet HEAD --; then
    echo "‚ö†Ô∏è  ================================="
    echo "‚ö†Ô∏è  ALTERA√á√ïES N√ÉO COMMITADAS ENCONTRADAS"
    echo "‚ö†Ô∏è  ================================="
    echo ""
    echo "üìã Arquivos modificados:"
    git status --porcelain
    echo ""
    echo "üîß Para resolver, execute UM dos comandos:"
    echo "   1Ô∏è‚É£  git add . && git commit -m 'Suas altera√ß√µes'"
    echo "   2Ô∏è‚É£  git stash  (guarda temporariamente)"
    echo "   3Ô∏è‚É£  ./check_git.sh  (script assistente)"
    echo ""
    echo "üöÄ Depois execute novamente: ./update.sh \"$COMMIT_MESSAGE\" \"$VERSION\""
    echo ""
    log_write "‚ö†Ô∏è  Deploy abortado: altera√ß√µes n√£o commitadas na shared-library." "$UPDATE_LOG"
    exit 1
fi

# Pede mensagem e vers√£o
COMMIT_MESSAGE=$1
VERSION=$2

if [ -z "$COMMIT_MESSAGE" ] || [ -z "$VERSION" ]; then
    log_write "‚ùå Uso: $0 \"Mensagem do commit\" \"Vers√£o\"" "$UPDATE_LOG"
    exit 1
fi

TAG="v$VERSION"

# Commit, push e tag
git add .
if git commit -m "$COMMIT_MESSAGE"; then
    log_write "‚úÖ Commit criado: $COMMIT_MESSAGE" "$UPDATE_LOG"
else
    log_write "‚ÑπÔ∏è  Nenhuma altera√ß√£o para commitar." "$UPDATE_LOG"
fi

git push origin main || {
    log_write "‚ùå Erro ao fazer push para main" "$UPDATE_LOG"
    exit 1
}

git tag "$TAG" || log_write "‚ö†Ô∏è  Tag $TAG j√° existe ou erro ao criar" "$UPDATE_LOG"
git push origin "$TAG" || log_write "‚ö†Ô∏è  Erro ao enviar tag $TAG" "$UPDATE_LOG"

log_write "‚úÖ Shared-library atualizada e tag $TAG processada." "$UPDATE_LOG"

cd "$ROOT_DIR" || exit 1

# --- Contadores para relat√≥rio ---
UPDATED_SERVICES=()
FAILED_SERVICES=()

# --- Atualiza√ß√£o das APIs ---
log_write "üîÑ Processando APIs..." "$UPDATE_LOG"

if [ -d "$API_DIR" ]; then
    for api in "$API_DIR"/*; do
        if [ -d "$api" ]; then
            SERVICE_NAME="api/$(basename "$api")"
            if update_service "$api" "$SERVICE_NAME"; then
                UPDATED_SERVICES+=("$SERVICE_NAME")
            else
                FAILED_SERVICES+=("$SERVICE_NAME")
            fi
        fi
    done
else
    log_write "‚ö†Ô∏è  Diret√≥rio de APIs n√£o encontrado: $API_DIR" "$UPDATE_LOG"
fi

# --- Atualiza√ß√£o do Dashboard ---
log_write "üîÑ Processando Dashboard..." "$UPDATE_LOG"

if update_service "$DASHBOARD_DIR" "dashboard"; then
    UPDATED_SERVICES+=("dashboard")
else
    FAILED_SERVICES+=("dashboard")
fi

# --- Relat√≥rio final ---
log_write "=============================================" "$UPDATE_LOG"
log_write "üìä RELAT√ìRIO FINAL DE ATUALIZA√á√ÉO" "$UPDATE_LOG"
log_write "=============================================" "$UPDATE_LOG"

if [ ${#UPDATED_SERVICES[@]} -gt 0 ]; then
    log_write "‚úÖ Servi√ßos atualizados com sucesso (${#UPDATED_SERVICES[@]}):" "$UPDATE_LOG"
    for service in "${UPDATED_SERVICES[@]}"; do
        log_write "   - $service" "$UPDATE_LOG"
    done
fi

if [ ${#FAILED_SERVICES[@]} -gt 0 ]; then
    log_write "‚ùå Servi√ßos com falha ou ignorados (${#FAILED_SERVICES[@]}):" "$UPDATE_LOG"
    for service in "${FAILED_SERVICES[@]}"; do
        log_write "   - $service" "$UPDATE_LOG"
    done
fi

log_write "=============================================" "$UPDATE_LOG"
log_write "üéâ Processo de atualiza√ß√£o conclu√≠do!" "$UPDATE_LOG"
log_write "üìù Total de servi√ßos processados: $((${#UPDATED_SERVICES[@]} + ${#FAILED_SERVICES[@]}))" "$UPDATE_LOG"
log_write "=============================================" "$UPDATE_LOG"
